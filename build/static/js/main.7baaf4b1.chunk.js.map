{"version":3,"sources":["Layout/Header.js","Layout/NotFound.js","utils/api/index.js","home/DeckSnapshot.js","home/DeckList.js","home/DeckCreate.js","study/StudyCardFront.js","study/StudyCardBack.js","study/Study.js","deck/CardList.js","deck/DeckView.js","deck/EditDeck.js","deck/CardForm.js","deck/AddCard.js","deck/EditCard.js","deck/DeckIndex.js","Layout/index.js","App.js","index.js"],"names":["Header","NotFound","API_BASE_URL","console","log","process","REACT_APP_API_BASE_URL","headers","Headers","stripCards","deck","cards","fetchJson","url","options","a","fetch","response","status","Error","statusText","json","name","listDecks","signal","createDeck","method","body","JSON","stringify","readDeck","deckId","updateDeck","updatedDeck","id","deleteDeck","createCard","card","Number","cardId","updateCard","updatedCard","deleteCard","append","DeckSnapshot","description","amount","deleteHandler","history","useHistory","className","onClick","push","DeckList","useState","decks","setDecks","useEffect","abortController","AbortController","then","abort","window","confirm","newDecks","list","map","length","DeckCreate","setDeck","changeHandler","event","target","value","submitHandler","preventDefault","to","onSubmit","htmlFor","type","required","maxLength","onChange","rows","StudyCardFront","currentCard","flipCard","front","StudyCardBack","nextCard","back","Study","currentCardIndex","setCurrentCardIndex","showFront","setShowFront","useParams","handleRestart","currentValue","CardList","refreshDeck","cardDeleteHandler","DeckView","props","deckDeleteHandler","EditDeck","CardForm","isNewCard","AddCard","initialCardState","setCard","EditCard","readCard","DeckIndex","exact","path","Layout","App","basename","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7baaf4b1.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Header() {\n  return (\n    <header>\n      <div>\n        <h1>Flashcard-o-matic</h1>\n        <h4>Discover The Flashcard Difference.</h4>\n      </div>\n    </header>\n  );\n}\n\nexport default Header;\n","import React from \"react\";\n\nfunction NotFound() {\n  return (\n    <section>\n      <h1>Not Found</h1>\n    </section>\n  );\n}\n\nexport default NotFound;\n","/**\n * Defines the base URL for the API.\n * The default values is overridden by the `API_BASE_URL` environment variable.\n */\nconst API_BASE_URL =\n  \"https://ericrossbernstein.github.io/project-flashcards\" ||\n  \"http://localhost:5000\";\nconsole.log(\"api url\", process.env.REACT_APP_API_BASE_URL);\n\n/**\n * Defines the default headers for these functions to work with `json-server`\n */\nconst headers = new Headers();\nheaders.append(\"Content-Type\", \"application/json\");\n\n/**\n * Removes the `cards` property from the deck so it is not accidentally saved with the deck.\n *\n * This function is NOT exported because it is not needed outside of this file.\n *\n * @param deck\n *  the deck instance\n * @returns {*}\n *  a copy of the deck instance with the `cards` property removed.\n */\nfunction stripCards(deck) {\n  const { cards, ...deckWithoutCards } = deck;\n  return deckWithoutCards;\n}\n\n/**\n * Fetch `json` from the specified URL and handle error status codes and ignore `AbortError`s\n *\n * This function is NOT exported because it is not needed outside of this file.\n *\n * @param url\n *  the url for the requst.\n * @param options\n *  any options for fetch\n * @returns {Promise<Error|any>}\n *  a promise that resolves to the `json` data or an error.\n *  If the response is not in the 200 - 399 range the promise is rejected.\n */\nasync function fetchJson(url, options) {\n  try {\n    const response = await fetch(url, options);\n    if (response.status < 200 || response.status > 399) {\n      throw new Error(`${response.status} - ${response.statusText}`);\n    }\n    return await response.json();\n  } catch (error) {\n    if (error.name !== \"AbortError\") {\n      throw error;\n    }\n  }\n}\n\n/**\n * Retrieves all existing decks.\n * @returns {Promise<[deck]>}\n *  a promise that resolves to a possibly empty array of decks saved in the database.\n */\nexport async function listDecks(signal) {\n  const url = `${API_BASE_URL}/decks?_embed=cards`;\n  return await fetchJson(url, { signal });\n}\n\n/**\n * Saves deck to the database (public/data/db.json).\n * There is no validation done on the deck object, any object will be saved.\n * @param deck\n *  the deck to save, which must not have an `id` property\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<deck>}\n *  a promise that resolves the saved deck, which will now have an `id` property.\n */\nexport async function createDeck(deck, signal) {\n  const url = `${API_BASE_URL}/decks`;\n  const options = {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify(stripCards(deck)),\n    signal,\n  };\n  return await fetchJson(url, options);\n}\n\n/**\n * Retrieves the deck with the specified `deckId`\n * @param deckId\n *  the `id` property matching the desired deck.\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<any>}\n *  a promise that resolves to the saved deck.\n */\nexport async function readDeck(deckId, signal) {\n  const url = `${API_BASE_URL}/decks/${deckId}?_embed=cards`;\n  return await fetchJson(url, { signal });\n}\n\n/**\n * Updates an existing deck\n * @param updatedDeck\n *  the deck to save, which must have an `id` property.\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the updated deck.\n */\nexport async function updateDeck(updatedDeck, signal) {\n  const url = `${API_BASE_URL}/decks/${updatedDeck.id}?_embed=cards`;\n  const options = {\n    method: \"PUT\",\n    headers,\n    body: JSON.stringify(stripCards(updatedDeck)),\n    signal,\n  };\n  return await fetchJson(url, options);\n}\n\n/**\n * Deletes the deck with the specified `deckId`.\n * @param deckId\n *  the id of the deck to delete\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to an empty object.\n */\nexport async function deleteDeck(deckId, signal) {\n  const url = `${API_BASE_URL}/decks/${deckId}`;\n  const options = { method: \"DELETE\", signal };\n  return await fetchJson(url, options);\n}\n\n/**\n * Retrieves all cards associated with the specified `deckId`.\n * @param deckId\n *  the id of the target deck\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to a possible empty array of cards.\n */\nexport async function listCards(deckId, signal) {\n  const url = `${API_BASE_URL}/cards?deckId=${deckId}`;\n  return await fetchJson(url, { signal });\n}\n\n/**\n * Creates a new card associated with the specified `deckId`.\n * There is no validation that there is an existing deck with the specified `deckId`.\n * @param deckId\n *  the id of the target deck\n * @param card\n *  the card to create, which must not have an `id` property\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the new card, which will have an `id` property.\n */\nexport async function createCard(deckId, card, signal) {\n  // There is a bug in json-server, if you post to /decks/:deckId/cards the associated deckId is a string\n  // and the card is not related to the deck because the data types of the ID's are different.\n  const url = `${API_BASE_URL}/cards`;\n  card.deckId = Number(deckId);\n  const options = {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify(card),\n    signal,\n  };\n  return await fetchJson(url, options);\n}\n\n/**\n * Retrieves the card with the specified `cardId`\n * @param cardId\n *  the id of the target\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the saved card.\n */\nexport async function readCard(cardId, signal) {\n  const url = `${API_BASE_URL}/cards/${cardId}`;\n  return await fetchJson(url, { signal });\n}\n\n/**\n * Updates an existing deck\n * @param updatedCard\n *  the card to save, which must have an `id` property.\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the updated card.\n */\nexport async function updateCard(updatedCard, signal) {\n  const url = `${API_BASE_URL}/cards/${updatedCard.id}`;\n  const options = {\n    method: \"PUT\",\n    headers,\n    body: JSON.stringify(updatedCard),\n  };\n  return await fetchJson(url, options);\n}\n\n/**\n * Deletes the card with the specified `cardId`.\n * @param cardId\n *  the id of the card to delete\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to an empty object.\n */\nexport async function deleteCard(cardId, signal) {\n  const url = `${API_BASE_URL}/cards/${cardId}`;\n  const options = { method: \"DELETE\", signal };\n  return await fetchJson(url, options);\n}\n","import React from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nexport const DeckSnapshot = ({\n  deckId,\n  name,\n  description,\n  amount,\n  deleteHandler,\n}) => {\n  const history = useHistory();\n\n  return (\n    <div className=\"card\">\n      <div className=\"item\">\n        <div className=\"group-row\">\n          <div className=\"item\">\n            <h3>{name}</h3>\n            <hr></hr>\n          </div>\n          <div className=\"circle\">\n            <h6>{amount} cards</h6>\n          </div>\n        </div>\n        <p>{description}</p>\n      </div>\n      <div className=\"footer\">\n        <button\n          className=\"item\"\n          onClick={() => history.push(`/decks/${deckId}`)}\n        >\n          View\n        </button>\n        <button\n          className=\"item\"\n          onClick={() => history.push(`/decks/${deckId}/study`)}\n        >\n          Study\n        </button>\n        <button className=\"item\" onClick={() => deleteHandler(deckId)}>\n          Delete\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default DeckSnapshot;\n","import React, { useEffect, useState } from \"react\";\nimport { listDecks, deleteDeck } from \"../utils/api/index.js\";\nimport DeckSnapshot from \"./DeckSnapshot\";\nimport { useHistory } from \"react-router-dom\";\n\nexport const DeckList = () => {\n  const [decks, setDecks] = useState([]);\n  const history = useHistory();\n\n  useEffect(() => {\n    const abortController = new AbortController();\n\n    listDecks(abortController.signal).then(setDecks);\n\n    return () => abortController.abort();\n  }, []);\n\n  const deleteHandler = async (deckId) => {\n    const result = window.confirm(\n      \"Delete this deck? You will not be able to recover it.\"\n    );\n    if (result) {\n      await deleteDeck(deckId);\n      const newDecks = await listDecks();\n      setDecks(newDecks);\n      history.push(\"/\");\n    }\n  };\n\n  const list = decks.map((deck) => (\n    <DeckSnapshot\n      key={deck.id}\n      deckId={deck.id}\n      name={deck.name}\n      description={deck.description}\n      amount={deck.cards.length}\n      deleteHandler={deleteHandler}\n    />\n  ));\n\n  return (\n    <main>\n      <section>\n        <div className=\"group\">\n          <div className=\"group\">{list}</div>\n          <button\n            className=\"item button-create\"\n            onClick={() => history.push(`/decks/new`)}\n          >\n            Create Deck\n          </button>\n        </div>\n      </section>\n    </main>\n  );\n};\n\nexport default DeckList;\n","import React, { useState } from \"react\";\nimport { createDeck } from \"../utils/api/index.js\";\nimport { useHistory, Link } from \"react-router-dom\";\n\nexport const DeckCreate = () => {\n  const initialDeckState = {\n    name: \"\",\n    description: \"\",\n  };\n  const [deck, setDeck] = useState({ ...initialDeckState });\n  const history = useHistory();\n\n  const changeHandler = (event) => {\n    setDeck({\n      ...deck,\n      [event.target.name]: event.target.value,\n    });\n  };\n\n  const submitHandler = async (event) => {\n    event.preventDefault();\n    await createDeck(deck);\n\n    // TODO: send user to Deck screen\n    history.push(\"/\");\n  };\n\n  return (\n    <section>\n      <nav>\n        <Link to=\"/\">Home</Link>\n        {\" / \"}\n        <span>Create Deck</span>\n      </nav>\n      <h3>Create Deck</h3>\n      <form onSubmit={submitHandler}>\n        <fieldset>\n          <div>\n            <label htmlFor=\"name\">Name:</label>\n            <input\n              id=\"name\"\n              name=\"name\"\n              type=\"text\"\n              required={true}\n              value={deck.name}\n              maxLength=\"100\"\n              onChange={changeHandler}\n            />\n          </div>\n          <div>\n            <label htmlFor=\"description\">Description:</label>\n            <textarea\n              id=\"description\"\n              name=\"description\"\n              required={true}\n              rows=\"3\"\n              maxLength=\"500\"\n              value={deck.description}\n              onChange={changeHandler}\n            />\n          </div>\n          <div className=\"group-row\">\n            <button className=\"item\" onClick={() => history.push(\"/\")}>\n              Cancel\n            </button>\n            <button className=\"item\" type=\"submit\">\n              Submit\n            </button>\n          </div>\n        </fieldset>\n      </form>\n    </section>\n  );\n};\n\nexport default DeckCreate;\n","import React from \"react\";\n\nexport const StudyCardFront = ({ currentCard, flipCard }) => {\n  return (\n    <div>\n      <div>\n        <h5>Front:</h5>\n        <p>{currentCard.front}</p>\n      </div>\n      <button className=\"button-flip\" onClick={() => flipCard()}>\n        Flip\n      </button>\n    </div>\n  );\n};\n\nexport default StudyCardFront;\n","import React from \"react\";\n\nexport const StudyCardBack = ({ currentCard, flipCard, nextCard }) => {\n  return (\n    <div>\n      <div>\n        <h5>Back:</h5>\n        <p>{currentCard.back}</p>\n      </div>\n      <div className=\"group-row\">\n        <button className=\"item\" onClick={() => flipCard()}>\n          Flip\n        </button>\n        <button className=\"item\" onClick={() => nextCard()}>\n          Next\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default StudyCardBack;\n","import React, { useEffect, useState } from \"react\";\nimport { useParams, Link, useHistory } from \"react-router-dom\";\nimport { readDeck } from \"../utils/api/index.js\";\nimport StudyCardFront from \"./StudyCardFront\";\nimport StudyCardBack from \"./StudyCardBack\";\n\nexport const Study = () => {\n  const [deck, setDeck] = useState([]);\n  const [currentCardIndex, setCurrentCardIndex] = useState(0);\n  const [showFront, setShowFront] = useState(true);\n  const { deckId } = useParams();\n  const history = useHistory();\n\n  useEffect(() => {\n    const abortController = new AbortController();\n    readDeck(deckId, abortController.signal).then(setDeck);\n\n    return () => abortController.abort();\n  }, [deckId]);\n\n  const nextCard = () => {\n    if (currentCardIndex < deck.cards.length - 1) {\n      setCurrentCardIndex((currentValue) => currentValue + 1);\n      setShowFront(true);\n    } else {\n      handleRestart();\n    }\n  };\n\n  const handleRestart = () => {\n    const result = window.confirm(\n      \"Restart cards? Click 'cancel' to return to the home page.\"\n    );\n    if (result) {\n      setCurrentCardIndex(0);\n      setShowFront(true);\n    } else {\n      history.push(\"/\");\n    }\n  };\n\n  const flipCard = () => {\n    setShowFront((currentValue) => !currentValue);\n  };\n\n  if (deck.name) {\n    return (\n      <section>\n        <nav>\n          <Link to=\"/\">Home</Link>\n          {\" / \"}\n          <Link to={`/decks/${deckId}`}>{deck.name}</Link>\n          {\" / \"}\n          <span>Study</span>\n        </nav>\n        <h2>\n          Study : <i>{deck.name}</i>\n        </h2>\n        {deck.cards.length <= 2 ? (\n          <div>\n            <h3>Not enough cards.</h3>\n            <p>\n              You need at least 3 cards to study. There are {deck.cards.length}{\" \"}\n              cards in this deck\n            </p>\n            <button onClick={() => history.push(`/decks/${deckId}/cards/new`)}>\n              Add Cards\n            </button>\n          </div>\n        ) : (\n          <div className=\"card\">\n            <h4>\n              Card {currentCardIndex + 1} of {deck.cards.length}\n            </h4>\n            <hr></hr>\n            {showFront ? (\n              <StudyCardFront\n                currentCard={deck.cards[currentCardIndex]}\n                flipCard={flipCard}\n              />\n            ) : (\n              <StudyCardBack\n                currentCard={deck.cards[currentCardIndex]}\n                flipCard={flipCard}\n                nextCard={nextCard}\n              />\n            )}\n          </div>\n        )}\n      </section>\n    );\n  } else {\n    return null;\n  }\n};\n\nexport default Study;\n","import React from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { deleteCard } from \"../utils/api/index.js\";\n\nexport const CardList = ({ cards, deckId, refreshDeck }) => {\n  const history = useHistory();\n\n  const cardDeleteHandler = async (cardId) => {\n    const result = window.confirm(\n      \"Delete this card? You will not be able to recover it.\"\n    );\n    if (result) {\n      await deleteCard(cardId);\n      await refreshDeck();\n      history.push(`/decks/${deckId}`);\n    }\n  };\n\n  return (\n    <div className=\"group\">\n      {cards.map((card) => (\n        <div className=\"card\" key={card.id}>\n          <div className=\"item\">\n            <h5>Front :</h5>\n            <p>{card.front}</p>\n            <hr></hr>\n          </div>\n          <div className=\"item\">\n            <h5>Back :</h5>\n            <p>{card.back}</p>\n            <hr></hr>\n          </div>\n          <div className=\"footer\">\n            <button\n              className=\"item\"\n              onClick={() =>\n                history.push(`/decks/${deckId}/cards/${card.id}/edit`)\n              }\n            >\n              Edit\n            </button>\n            <button className=\"item\" onClick={() => cardDeleteHandler(card.id)}>\n              Delete\n            </button>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default CardList;\n","import React, { useEffect } from \"react\";\nimport { useParams, useHistory, Link } from \"react-router-dom\";\nimport { readDeck, deleteDeck } from \"../utils/api/index.js\";\nimport CardList from \"./CardList\";\n\nexport const DeckView = (props) => {\n  const { deck, setDeck } = props;\n  const { deckId } = useParams();\n  const history = useHistory();\n\n  useEffect(() => {\n    const abortController = new AbortController();\n    readDeck(deckId, abortController.signal).then(setDeck);\n\n    return () => abortController.abort();\n  }, [deckId, setDeck]);\n\n  const deckDeleteHandler = async (deckId) => {\n    const result = window.confirm(\n      \"Delete this deck? You will not be able to recover it.\"\n    );\n    if (result) {\n      await deleteDeck(deckId);\n      history.push(\"/\");\n    }\n  };\n\n  const refreshDeck = async () => {\n    const updatedDeck = await readDeck(deckId);\n    setDeck(updatedDeck);\n  };\n\n  if (deck.id) {\n    return (\n      <section>\n        <div>\n          <div>\n            <nav>\n              <Link to=\"/\">Home</Link>\n              {\" / \"}\n              <span>{deck.name}</span>\n            </nav>\n            <div className=\"group\">\n              <div className=\"item-triple\">\n                <h3>{deck.name}</h3>\n                <p>{deck.description}</p>\n              </div>\n              <div className=\"group-row\">\n                <button\n                  className=\"button-deck\"\n                  onClick={() => history.push(`/decks/${deckId}/edit`)}\n                >\n                  Edit\n                </button>\n                <button\n                  className=\"button-deck\"\n                  onClick={() => history.push(`/decks/${deckId}/study`)}\n                >\n                  Study\n                </button>\n                <button\n                  className=\"button-deck\"\n                  onClick={() => history.push(`/decks/${deckId}/cards/new`)}\n                >\n                  Add Cards\n                </button>\n                <button\n                  className=\"button-deck\"\n                  onClick={() => deckDeleteHandler(deckId)}\n                >\n                  Delete Deck\n                </button>\n              </div>\n            </div>\n          </div>\n          <h2>Cards</h2>\n          <hr></hr>\n          <CardList\n            cards={deck.cards}\n            deckId={deckId}\n            refreshDeck={refreshDeck}\n          />\n        </div>\n      </section>\n    );\n  } else {\n    return null;\n  }\n};\n\nexport default DeckView;\n","import React, { useEffect } from \"react\";\nimport { useHistory, useParams, Link } from \"react-router-dom\";\nimport { readDeck, updateDeck } from \"../utils/api/index.js\";\n\nexport const EditDeck = (props) => {\n  const { deck, setDeck } = props;\n  const history = useHistory();\n  const { deckId } = useParams();\n\n  useEffect(() => {\n    const abortController = new AbortController();\n    readDeck(deckId, abortController.signal).then(setDeck);\n\n    return () => abortController.abort();\n  }, [deckId, setDeck]);\n\n  const changeHandler = (event) => {\n    setDeck({\n      ...deck,\n      [event.target.name]: event.target.value,\n    });\n  };\n\n  const submitHandler = async (event) => {\n    event.preventDefault();\n    await updateDeck(deck);\n    history.push(`/decks/${deckId}`);\n  };\n\n  return (\n    <section>\n      <div>\n        <nav>\n          <Link to=\"/\">Home</Link>\n          {\" / \"}\n          <Link to={`/decks/${deckId}`}>{deck.name}</Link>\n          {\" / \"}\n          <span>Edit Deck</span>\n        </nav>\n        <h2>Edit Deck</h2>\n        <form onSubmit={submitHandler}>\n          <fieldset>\n            <div>\n              <label htmlFor=\"name\">Name :</label>\n              <input\n                id=\"name\"\n                name=\"name\"\n                type=\"text\"\n                required={true}\n                value={deck.name}\n                maxLength=\"100\"\n                onChange={changeHandler}\n              />\n            </div>\n            <div>\n              <label htmlFor=\"description\">Description :</label>\n              <textarea\n                id=\"description\"\n                name=\"description\"\n                required={true}\n                rows=\"3\"\n                maxLength=\"500\"\n                value={deck.description}\n                onChange={changeHandler}\n              />\n            </div>\n            <div className=\"group-row\">\n              <button\n                className=\"item\"\n                onClick={() => history.push(`/decks/${deckId}`)}\n              >\n                Cancel\n              </button>\n              <button className=\"item\" type=\"submit\">\n                Submit\n              </button>\n            </div>\n          </fieldset>\n        </form>\n      </div>\n    </section>\n  );\n};\n\nexport default EditDeck;\n","import React from \"react\";\n\nexport const CardForm = (props) => {\n  const {\n    history,\n    isNewCard,\n    card,\n    deckId,\n    changeHandler,\n    submitHandler,\n  } = props;\n  return (\n    <form onSubmit={submitHandler}>\n      <fieldset>\n        <div>\n          <label htmlFor=\"front\">Front :</label>\n          <textarea\n            id=\"front\"\n            name=\"front\"\n            required={true}\n            rows=\"3\"\n            maxLength=\"300\"\n            value={card.front}\n            onChange={changeHandler}\n          />\n        </div>\n        <div>\n          <label htmlFor=\"back\">Back :</label>\n          <textarea\n            id=\"back\"\n            name=\"back\"\n            required={true}\n            rows=\"3\"\n            maxLength=\"300\"\n            value={card.back}\n            onChange={changeHandler}\n          />\n        </div>\n        <div className=\"group-row\">\n          <button\n            className=\"item\"\n            onClick={() => history.push(`/decks/${deckId}`)}\n          >\n            {isNewCard ? \"Done\" : \"Cancel\"}\n          </button>\n          <button className=\"item\" type=\"submit\">\n            {isNewCard ? \"Save\" : \"Submit\"}\n          </button>\n        </div>\n      </fieldset>\n    </form>\n  );\n};\n\nexport default CardForm;\n","import React, { useState, useEffect } from \"react\";\nimport { createCard, readDeck } from \"../utils/api/index.js\";\nimport { useHistory, useParams, Link } from \"react-router-dom\";\nimport CardForm from \"./CardForm.js\";\n\nexport const AddCard = (props) => {\n  const initialCardState = {\n    front: \"\",\n    back: \"\",\n  };\n  const [card, setCard] = useState({ ...initialCardState });\n  const { deck, setDeck } = props;\n  const isNewCard = true;\n  const history = useHistory();\n  const { deckId } = useParams();\n\n  useEffect(() => {\n    const abortController = new AbortController();\n    readDeck(deckId, abortController.signal).then(setDeck);\n\n    return () => abortController.abort();\n  }, [deckId, setDeck]);\n\n  const changeHandler = (event) => {\n    setCard({\n      ...card,\n      [event.target.name]: event.target.value,\n    });\n  };\n\n  const submitHandler = async (event) => {\n    event.preventDefault();\n    await createCard(deckId, card);\n    setCard({ ...initialCardState });\n  };\n\n  if (deck.name) {\n    return (\n      <section>\n        <div>\n          <nav>\n            <Link to=\"/\">Home</Link>\n            {\" / \"}\n            <Link to={`/decks/${deckId}`}>{deck.name}</Link>\n            {\" / \"}\n            <span>Add Card</span>\n          </nav>\n          <h2>\n            <i>{deck.name}</i> : Add Card\n          </h2>\n          <CardForm\n            history={history}\n            isNewCard={isNewCard}\n            card={card}\n            deckId={deckId}\n            changeHandler={changeHandler}\n            submitHandler={submitHandler}\n          />\n        </div>\n      </section>\n    );\n  } else {\n    return null;\n  }\n};\n\nexport default AddCard;\n","import React, { useState, useEffect } from \"react\";\nimport { useHistory, useParams, Link } from \"react-router-dom\";\nimport { readCard, updateCard, readDeck } from \"../utils/api/index.js\";\nimport CardForm from \"./CardForm.js\";\n\nexport const EditCard = (props) => {\n  const initialCardState = {\n    front: \"\",\n    back: \"\",\n  };\n  const [card, setCard] = useState({ ...initialCardState });\n  const { deck, setDeck } = props;\n  const history = useHistory();\n  const { deckId, cardId } = useParams();\n  const isNewCard = false;\n\n  useEffect(() => {\n    const abortController = new AbortController();\n    readCard(cardId, abortController.signal).then(setCard);\n\n    return () => abortController.abort();\n  }, [cardId]);\n\n  useEffect(() => {\n    const abortController = new AbortController();\n    readDeck(deckId, abortController.signal).then(setDeck);\n\n    return () => abortController.abort();\n  }, [deckId, setDeck]);\n\n  const changeHandler = (event) => {\n    setCard({\n      ...card,\n      [event.target.name]: event.target.value,\n    });\n  };\n\n  const submitHandler = async (event) => {\n    event.preventDefault();\n    await updateCard(card);\n    history.push(`/decks/${deckId}`);\n  };\n\n  if (deck.name) {\n    return (\n      <section>\n        <div>\n          <nav>\n            <Link to=\"/\">Home</Link>\n            {\" / \"}\n            <Link to={`/decks/${deckId}`}>{deck.name}</Link>\n            {\" / \"}\n            <span>Edit Card {cardId}</span>\n          </nav>\n          <h2>Edit Card</h2>\n          <CardForm\n            history={history}\n            isNewCard={isNewCard}\n            card={card}\n            deckId={deckId}\n            changeHandler={changeHandler}\n            submitHandler={submitHandler}\n          />\n        </div>\n      </section>\n    );\n  } else {\n    return null;\n  }\n};\n\nexport default EditCard;\n","import React, { useState } from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport DeckView from \"./DeckView\";\nimport EditDeck from \"./EditDeck\";\nimport AddCard from \"./AddCard\";\nimport EditCard from \"./EditCard\";\n\nexport const DeckIndex = () => {\n  const [deck, setDeck] = useState([]);\n\n  return (\n    <Switch>\n      <Route exact path=\"/decks/:deckId\">\n        <DeckView deck={deck} setDeck={setDeck} />\n      </Route>\n      <Route path=\"/decks/:deckId/edit\">\n        <EditDeck deck={deck} setDeck={setDeck} />\n      </Route>\n      <Route path=\"/decks/:deckId/cards/new\">\n        <AddCard deck={deck} setDeck={setDeck} />\n      </Route>\n      <Route path=\"/decks/:deckId/cards/:cardId/edit\">\n        <EditCard deck={deck} setDeck={setDeck} />\n      </Route>\n    </Switch>\n  );\n};\n\nexport default DeckIndex;\n","import React from \"react\";\nimport Header from \"./Header\";\nimport NotFound from \"./NotFound\";\nimport { Route, Switch } from \"react-router-dom\";\nimport DeckList from \"../home/DeckList\";\nimport DeckCreate from \"../home/DeckCreate\";\nimport Study from \"../study/Study\";\nimport DeckIndex from \"../deck/DeckIndex\";\n\nfunction Layout() {\n  return (\n    <div>\n      <Header />\n      <hr></hr>\n      <div>\n        <Switch>\n          <Route exact path=\"/\">\n            <DeckList />\n          </Route>\n          <Route exact path=\"/decks/new\">\n            <DeckCreate />\n          </Route>\n          <Route exact path=\"/decks/:deckId/study\">\n            <Study />\n          </Route>\n          <Route path=\"/decks/:deckId\">\n            <DeckIndex />\n          </Route>\n          <Route>\n            <NotFound />\n          </Route>\n        </Switch>\n      </div>\n    </div>\n  );\n}\n\nexport default Layout;\n","import React from \"react\";\nimport { HashRouter, Route, Switch } from \"react-router-dom\";\nimport Layout from \"./Layout\";\nimport \"./App.css\";\n\n/**\n * App is a wrapper for <Layout>, you should not need to change this file.\n */\n\nfunction App() {\n  return (\n    <HashRouter basename=\"/\">\n      <div className=\"App\">\n        <Switch>\n          <Route path=\"/\">\n            <Layout />\n          </Route>\n        </Switch>\n      </div>\n    </HashRouter>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}